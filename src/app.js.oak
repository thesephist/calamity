{
	println: println
	default: default
	slice: slice
	map: map
	merge: merge
	filter: filter
	append: append
} := import('std')
{
	endsWith?: endsWith?
	padStart: padStart
	trim: trim
} := import('str')
fmt := import('fmt')
math := import('math')
datetime := import('datetime')

json := {
	parse: __native_json_parse
	serialize: __native_json_serialize
}
storage := import('../lib/storage')
{
	Renderer: Renderer
	h: h
} := import('../lib/torus.js')

DefaultTokens := 20
DefaultN := 5
// warn at this total token count that results may time out
HighTokenCountWarning := 200
StateStorageKey := 'calamity_db'

State := storage.load(StateStorageKey, {
	fetching?: false
	sidebar?: true
	docIdx: 0
	docs: [{
		params: {
			// mirrors the parameter names used in the GPT2 API
			tokens: DefaultTokens
			n: DefaultN
		}
		prompt: ''
		completions: []
		created: int(time())
	}]
}) |> merge({
	fetching?: false
	docIdx: 0
	sidebar?: false
})

fn fetchCompletion(prompt, withCompletions) {
	render(State.fetching? := true)

	{ tokens: tokens, n: n } := currentDoc().params
	resp := with fetch('/gen') {
		method: 'POST'
		body: json.serialize({
			text: prompt |> trim()
			tokens: tokens
			n: n
		})
	}

	fn handleErr(e) render(State.fetching? := String(e))

	resp |> call(:catch, handleErr)
	jsonResp := with resp.then() fn(r) if r.status {
		200 -> r.json()
		_ -> handleErr('Request failed.')
	}

	jsonResp |> call(:catch, handleErr)
	with jsonResp.then() fn(data) if data {
		? -> handleErr('Request serialization failed.')
		_ -> {
			render(State.fetching? := false)
			withCompletions(data)
		}
	}
}

fn updateCompletions() if !State.fetching? -> {
	start := time()
	doc := currentDoc()
	prompt := doc.prompt
	with fetchCompletion(prompt) fn(completions) {
		end := time()
		doc.responseTime := end - start
		doc.completions := completions |> map(fn(completion) [prompt, completion])
		persistAndRender()
	}
}

fn currentDoc() State.docs.(State.docIdx)

fn truncate(s, n) if len(s) < n {
	true -> s
	_ -> s |> slice(0, n) + '...'
}

fn focusPromptInput {
	if promptEditor := document.querySelector('.prompt-editor-input') {
		? -> ?
		_ -> {
			promptEditor.focus()
			promptEditor.setSelectionRange(len(promptEditor.value), len(promptEditor.value))
		}
	}
}

fn insertDoc(attrs) {
	newDoc := {
		params: {
			tokens: DefaultTokens
			n: DefaultN
		}
		prompt: ''
		completions: []
	} |> merge(attrs, { created: int(time()) })
	newDoc.fav := _

	State.docs := [newDoc] |> append(State.docs)
	State.docIdx := 0
	persistAndRender()

	focusPromptInput()
}

fn cloneDoc(doc) doc |> json.serialize() |> json.parse()

fn persistAndRender {
	storage.persist(StateStorageKey, State)
	render()
}

r := Renderer('#root')

fn Link(text, link) h(:a, [], { target: '_blank', href: link }, [text])

fn render {
	with r.update() h(:div, [
		'app'
		if State.sidebar? {
			true -> 'sidebar-visible'
			_ -> 'sidebar-hidden'
		}
	], [
		h(:div, ['sidebar'], [
			h(:div, ['logo'], [
				h(:a, [], { href: '/' }, [
					'Calamity'
					h(:span, ['logo-faded'], [', an AI notebook'])
				])
			])
			h(:li, ['floating', 'inactive', 'docs-item', 'new-doc-button'], {}, {
				click: fn {
					State.sidebar? := false
					insertDoc({})
				}
			}, ['+ New prompt'])
			h(:div, ['docs-list-container'], [
				h(:ul, ['docs-list'], {
					State.docs |> with map() fn(doc, i) {
						emptyPrompt? := doc.prompt |> trim() = ''
						h(
							:li
							[
								'floating'
								'docs-item'
								if State.docIdx {
									i -> 'active'
									_ -> 'inactive'
								}
								if {
									emptyPrompt? -> 'empty'
									_ -> ''
								}
								if doc.fav {
									true -> 'favorited'
									_ -> ''
								}
							]
							{
								title: doc.prompt
							}
							{
								click: fn {
									State.docIdx := i
									State.sidebar? := false
									persistAndRender()
								}
							}
							[
								h(:div, ['docs-item-content'], [
									if {
										emptyPrompt? -> 'empty'
										_ -> doc.prompt |> truncate(72)
									}
								])
								h(:div, ['docs-item-meta'], [{
									{
										year: year, month: month, day: day
										hour: hour, minute: min
									} := datetime.describe(doc.created)
									'{{0}}/{{1}}/{{2}} {{3}}:{{4}}' |> fmt.format(
										year, month, day, hour
										string(min) |> padStart(2, '0')
									)
								}])
							]
						)
					}
				})
			])
			h(:div, ['masthead'], [
				h(:p, [], [
					Link('Calamity', 'https://github.com/thesephist/calamity')
					' is a project by '
					Link('Linus', 'https://thesephist.com')
					' built with '
					Link('Oak', 'https://oaklang.org/')
					' and '
					Link('Torus', 'https://github.com/thesephist/torus')
					'.'
				])
			])
		])
		h(:main, [], [
			{
				prompt := currentDoc().prompt
				h(:div, ['editor-container'], [
					h(:div, [
						'floating', 'inactive', 'editor-shadow'
						if prompt |> endsWith?('\n') {
							true -> 'extra-height'
							_ -> ''
						}
					], [prompt])
					h(:textarea, ['prompt-editor-input', 'floating', 'editor-itself'], {
						value: prompt
						placeholder: 'Start a prompt...'
					}, {
						input: fn(evt) {
							currentDoc().prompt := evt.target.value
							persistAndRender()
						}
						keydown: fn(evt) if [evt.key, evt.ctrlKey | evt.metaKey] {
							['Enter', true] -> updateCompletions()
						}
					}, [])
				])
			}
			h(:div, ['ai-controls'], [
				h(:div, ['ai-inputs'], [
					h(:button, ['floating', 'mobile'], { title: 'More prompts' }, {
						click: fn {
							State.sidebar? := !State.sidebar?
							render()
						}
					}, ['☰'])
					h(:label, [], [
						h(:span, ['label-text'], ['Tokens'])
						h(:input, ['floating'], {
							type: 'number'
							min: '1'
							max: '200'
							value: currentDoc().params.tokens
						}, {
							input: fn(evt) {
								currentDoc().params.tokens := int(evt.target.value) |> default(DefaultTokens)
								persistAndRender()
							}
						}, [])
					])
					h(:label, [], [
						h(:span, ['label-text', 'desktop'], ['Completions'])
						h(:span, ['label-text', 'mobile'], ['Seqs'])
						h(:input, ['floating'], {
							type: 'number'
							min: '1'
							max: '50'
							value: currentDoc().params.n
						}, {
							input: fn(evt) {
								currentDoc().params.n := int(evt.target.value) |> default(DefaultN)
								persistAndRender()
							}
						}, [])
					])
				])
				h(:div, ['ai-buttons'], [
					if len(State.docs) {
						1 -> ?
						_ -> h(:button, ['floating', 'ai-delete-button'], { title: 'Delete' }, {
							click: fn {
								State.docs := State.docs |> filter(fn(_, i) i != State.docIdx)
								State.sidebar? := true
								if currentDoc() {
									? -> State.docIdx := 0
								}
								persistAndRender()
							}
						}, ['×'])
					}
					h(:button, ['floating', 'ai-clone-button'], {}, {
						click: fn() currentDoc() |> cloneDoc() |> insertDoc()
					}, ['Clone'])
					h(:button, [
						'floating'
						'ai-fav-button'
						if currentDoc().fav {
							true -> 'favorited'
							_ -> ''
						}
					], { title: 'Toggle favorite' }, {
						click: fn {
							if currentDoc().fav {
								true -> currentDoc().fav := _
								_ -> currentDoc().fav := true
							}
							persistAndRender()
						}
					}, [])
					h(:button, ['floating', 'accent', 'ai-generate-button'], {
						disabled: State.fetching? = true
					}, {
						click: updateCompletions
					}, ['Generate'])
				])
			])
			h(:div, ['response-meta'], {
				doc := currentDoc()
				totalTokens := doc.params.tokens * doc.params.n
				[
					h(:div, ['response-meta-time'], [
						if doc.responseTime {
							? -> '—'
							_ -> fmt.format(
								'{{0}}s ({{1}}s/tok)'
								math.round(doc.responseTime, 2)
								math.round(doc.responseTime / totalTokens, 3)
							)
						}
					])
					if totalTokens > HighTokenCountWarning {
						true -> h(:div, ['response-meta-high-tokens'], [
							h(:span, ['desktop'], [
								'You\'re generating a lot (' + string(totalTokens) + 'tok) of text! '
							])
							'This may time out.'
						])
						_ -> h(:div, ['response-meta-tokens'], [
							string(totalTokens) + ' total tokens'
						])
					}
				]
			})
			h(:div, ['completions-container'], {
				if State.fetching? {
					true -> [h(:div, ['completions-fetching'], [
						h(:div, ['loading'], [])
					])]
					false -> currentDoc().completions |> with map() fn(completion) {
						[prompt, generated] := completion
						h(:div, ['floating', 'completion'], {}, {
							click: fn {
								currentDoc().prompt := prompt + generated
								persistAndRender()

								focusPromptInput()
							}
						}, [
							h(:span, ['completion-prompt'], [prompt])
							h(:span, ['completion-generated'], [generated])
						])
					}
					_ -> [h(:div, ['completions-error'], [
						'Error: '
						State.fetching? // error message
					])]
				}
			})
		])
	])
}
render()

with window.addEventListener('beforeunload') fn {
	storage.persistImmediately(StateStorageKey, State)
}

